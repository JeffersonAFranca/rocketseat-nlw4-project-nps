Ambiente VsCode (Extensões instaladas)

-Settings Sync (sincronizar configurações VSCode no GitHub)
      -Dracula Official (Tema)
      -TabNine Autocomplete
      -Prettier Code Formatter
      -Bracket Pair Colorizer
      -Material Icon Theme
      -HTML Preview
      -LiveServer  
      -Node.js exec
      -Debugguer for Chrome
------------------------------------------------------------------------

Já Instalados em projetos anterios
- Git Bash version - 2.30.0.windows.2
- Node.js  version - v14.16.0.windows
------------------------------------------------------------------------
Instalados Projeto-NPS 
- Yarn       version - 1.22.5  (gerenciador de pacotes) Windows
  PowerShell: cinst yarn
  E escolha a opção `[A]ll - yes to all`.

- Chocolatey version - 0.10.15 (gerenciador de dependencias) Windows
- Insomnia.Designer-2020.5.2 (Aplicativo utilizado para interção com APi baseadas no protocolo HTTP )

-----------------------------------------------------------------


-----------------------------------------------------------------
AULA 1  - Preparação do Ambiente 
(Instalação do Framwork Express dependencias e Configuração do Servidor)
-----------------------------------------------------------------

Instalados Projeto-NPS 
- Yarn       version - 1.22.5   (gerenciador de pacotes) Windows
- Chocolatey version - 0.10.15  (gerenciador de dependencias) Windows
- Insomnia.Designer  - 2020.5.2 (Aplicativo utilizado para interção com APi baseadas no protocolo HTTP )


!!!IMPORTANTE APOS A INSTALACAO DOS PACOTES VERIFICAR SE ELES FORAM
ADICIONADOS NO package.json!!!!

- Acessar a pasta raiz do projeto nlw/api
- Inicializar o projeto  
   yarn init -y - Será criado um arquivo package.json 
   (arquivo que será utilizado para declaração das Dependências/Parametros/Scripts

- Instalar dependência "Express" ( Framework para otimizar a construção de
  aplicações web e API's)
  yarn add express 
  yarn add @types/express -D

- Instalar devdependência "typescript" como dependência para que o node consiga interpretar.
sintaxes em typescript.
      yarn add typescript -D
      yarn tsc --init // Incia Typescript será criado um arquivo tsconfig.json (no arquivo criado alterar "strict": false,)  

      Habilitar e alterar parametros no arquivo "tsconfig.json".
       "strict": false,
       "strictPropertyInitialization": false,
       "emitDecoratorMetadata": true,         //Habilita decorators 
       "experimentalDecorators": true,        //Habilita decorators 
       "lib": [ "es2015" ],                   /* Specify library files to be included in the compilation. */

- Instalar devdependência "ts-node-dev" compilador para arquivos .ts 
      yarn add ts-node-dev -D



Testando Servidor: 
      - criar um arquivo "server.ts" dentro da pasta do projeto e adicionar os códigos abaixo:
            /*
            import express from 'express';

            const app = express();

            app.get("/", (request, response) =>{
            return response("Hello Word!!!)
            })

            // Iniciando Servidor
            app.listen(3333, () => console.log('Server is running') );
            */

      - criar ou alterar o script no arquivo package.json:
           /*
            "scripts": {
            "dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts"
            }
           */
      -No Terminal executar: yarn dev   //Para iniciar o servidor 


-----------------------------------------------------------------
AULA 2  - Preparação do ambiente para acesso ao banco de dados 
-----------------------------------------------------------------

- Instalação TypeORM (Framework) ORM- Object Relational Mapping
      Faz uma Ponte entre Orientação a Objetos e o Banco de Dados
            yarn add typeorm reflect-metadata
- Instalação dependencia "sqlite3" (driver banco de dados sqlite) 
      yarn add sqlite3

- Criação de uma CLI (Command Line Interface)
      *** A criação da CLI tem por objetivo facilitar o trabalho com as "migration" ***
      Adicionar no arquivo "package.json" o script chamando a CLI dentro do express
            "typeorm": "ts-node-dev node_modules/typeorm/cli.js"

           //Exemplo:
           "scripts": {
              "gitupd": "git push -u origin master",
              "dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts",
              "typeorm": "ts-node-dev node_modules/typeorm/cli.js",
              "test": "cross-env NODE_ENV=test jest"
             },

      Configurar localização da pasta onde serão criadas as "migrations" no "ormconfig.json"      
            {
                  "type": "sqlite",
                  "database": "./src/database/database.sqlite",
                        
                  "cli":{
                        "migrationsDir": "./src/database/migrations"
                  }     
            }

      Testar Configuração:
            yarn typeorm
      Testar funcionalidade ao gerar "migration":
            yarn typeorm migration:create -n CreateUsers
      Exetutar migration:
            yarn typeorm migration:run

- Instalação Beekeeper Studio - Gerenciador de Banco de Dados
- Instalação da dependência "@types/uuid"



-----------------------------------------------------------------
AULA 2  - Testes automatizados
-----------------------------------------------------------------

Instalação da devdependência "jest" e @types.
      yarn add jest @types/jest -D
      yarn jest --init
Parametros iniciais de configuração jest
√ Would you like to use Jest when running "test" script in "package.json"? ... yes
√ Would you like to use Typescript for the configuration file? ... yes   
√ Choose the test environment that will be used for testing » node       
√ Do you want Jest to add coverage reports? ... no
√ Which provider should be used to instrument code for coverage? » v8    
√ Automatically clear mock calls and instances between every test? ... yes

jest.config.ts

      // Stop running tests after `n` failures
      bail: true,
      // The test environment that will be used for testing
      //testEnvironment: "node",
      // The glob patterns Jest uses to detect test files
       testMatch: [ "**/__tests__/*.test.ts*" ],
      // A preset that is used as a base for Jest's configuration
       preset: "ts-jest",
      "types": ["@types/jest"], /* Type declaration files to be included in compilation. */

      Criado pasta __tests__ dentro de scr/

- Instalação de devdependência "ts-jest" (É um preset necesário para o funcionamento do Jest)
      yarn add ts-jest @types/jest -D  
-Instalação devdependência "supertest" (Simulador de servidor iniciado)
      yarn add supertest @types/supertest -D
-Instalação devdependência "cross-env" (Trabalhar com variáveis de ambiente)
      yarn add cross-env -D   

-Cria Migrations
-Cria Models
-Cria Repository
-Cria Controller

1- Testes unitarios
2- Testes de Integração
      ->router -> controller -> repository
      <- repository -< controller <- response
3- Ponta a Ponta (E2E)
      

      


