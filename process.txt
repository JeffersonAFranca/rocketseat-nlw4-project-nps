Ambiente VsCode (Extensões instaladas)

-Settings Sync (sincronizar configurações VSCode no GitHub)
      -Dracula Official (Tema)
      -TabNine Autocomplete
      -Prettier Code Formatter
      -Bracket Pair Colorizer
      -Material Icon Theme
      -HTML Preview
      -LiveServer  
      -Node.js exec
      -Debugguer for Chrome
------------------------------------------------------------------------

Já Instalados em projetos anterios
- Git Bash version - 2.30.0.windows.2
- Node.js  version - v14.16.0.windows
------------------------------------------------------------------------
Instalados Projeto-NPS 
- Yarn       version - 1.22.5  (gerenciador de pacotes) Windows
  PowerShell: cinst yarn
  E escolha a opção `[A]ll - yes to all`.

- Chocolatey version - 0.10.15 (gerenciador de dependencias) Windows
- Insomnia.Designer-2020.5.2 (Aplicativo utilizado para interção com APi baseadas no protocolo HTTP )

-----------------------------------------------------------------


-----------------------------------------------------------------
AULA 1  - Preparação do Ambiente 
(Instalação do Framwork Express dependencias e Configuração do Servidor)
-----------------------------------------------------------------

Instalados Projeto-NPS 
- Yarn       version - 1.22.5   (gerenciador de pacotes) Windows
- Chocolatey version - 0.10.15  (gerenciador de dependencias) Windows
- Insomnia.Designer  - 2020.5.2 (Aplicativo utilizado para interção com APi baseadas no protocolo HTTP )


!!!IMPORTANTE APOS A INSTALACAO DOS PACOTES VERIFICAR SE ELES FORAM
ADICIONADOS NO package.json!!!!

- Acessar a pasta raiz do projeto nlw/api
- Inicializar o projeto  
   Terminal: yarn init -y 
      Será criado um arquivo package.json (arquivo que será utilizado 
      para armazenar parametros do projeto (Dependências) )

- Instalar dependência "Express" ( Framework para otimizar a construção de
  aplicações web e API's)
  Terminal: yarn add express 
   Será criado uma pasta nwl/api/node_modules 

- Instalar devdependência "@types" de tipagem de dados no express
   yarn add @types/express -D //Instalar como dependência de desenvolvimento

- Instalar devdependência "typescript" como dependência para que o node consiga interpretar.
sintaxes em typescript.
      yarn add typescript -D
      Inicializar typescript
      yarn tsc --init // será criado um arquivo tsconfig.json (no arquivo criado alterar "strict": false,)  

- Instalar devdependência "ts-node-dev" compila o arquivo .ts e reinicia o projeto (semelhante ao NODEMON)
      yarn add ts-node-dev -D

// FIM



Testando Servidor: 
      - criar um arquivo "server.ts" dentro da pasta do projeto e adicionar os códigos abaixo:
            /*
            import express from 'express';

            const app = express();

            app.get("/", (request, response) =>{
            return response("Hello Word!!!)
            })

            // Iniciando Servidor
            app.listen(3333, () => console.log('Server is running') );
            */

      - criar ou alterar o script no arquivo package.json:
           /*
            "scripts": {
            "dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts"
            }
           */
      -No Terminal executar: yarn dev   //Para iniciar o servidor 


-----------------------------------------------------------------
AULA 2  - Preparação do ambiente para acesso ao banco de dados 
-----------------------------------------------------------------

- Instalação TypeORM (Framework) ORM- Object Relational Mapping
      Faz uma Ponte entre Orientação a Objetos e o Banco de Dados
            yarn add typeorm reflect-metadata
- Instalação dependencia "sqlite3" (driver banco de dados sqlite) 
      yarn add sqlite3

- Criação de uma CLI (Command Line Interface)
      *** A criação da CLI tem por objetivo facilitar o trabalho com as "migration" ***
      Adicionar no arquivo "package.json" o script chamando a CLI dentro do express
            "typeorm": "ts-node-dev node_modules/typeorm/cli.js"

           //Exemplo:
            "scripts": {
            "dev": "ts-node-dev --transpile-only --ignore-watch node_modules src/server.ts",
             "typeorm": "ts-node-dev node_modules/typeorm/cli.js"
            }

      Configurar localização da pasta onde serão criadas as "migrations" no "ormconfig.json"      
            {
                  "type": "sqlite",
                  "database": "./src/database/database.sqlite",
                        
                  "cli":{
                        "migrationsDir": "./src/database/migrations"
                  }     
            }

      Testar Configuração:
            yarn typeorm
      Testar funcionalidade ao gerar "migration":
            yarn typeorm migration:create -n CreateUsers

- Instalação Beekeeper Studio - Gerenciador de Banco de Dados
      

      


